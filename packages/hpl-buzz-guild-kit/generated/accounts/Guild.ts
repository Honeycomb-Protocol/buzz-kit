/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import { Member, memberBeet } from '../types/Member'
import { GuildVisibility, guildVisibilityBeet } from '../types/GuildVisibility'
import { JoiningCriteria, joiningCriteriaBeet } from '../types/JoiningCriteria'

/**
 * Arguments used to create {@link Guild}
 * @category Accounts
 * @category generated
 */
export type GuildArgs = {
  guildId: web3.PublicKey
  bump: number
  guildKit: web3.PublicKey
  matrixId: string
  name: string
  members: Member[]
  visibility: GuildVisibility
  joiningCriteria: JoiningCriteria
}

export const guildDiscriminator = [74, 176, 57, 164, 195, 188, 156, 237]
/**
 * Holds the data for the {@link Guild} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Guild implements GuildArgs {
  private constructor(
    readonly guildId: web3.PublicKey,
    readonly bump: number,
    readonly guildKit: web3.PublicKey,
    readonly matrixId: string,
    readonly name: string,
    readonly members: Member[],
    readonly visibility: GuildVisibility,
    readonly joiningCriteria: JoiningCriteria
  ) {}

  /**
   * Creates a {@link Guild} instance from the provided args.
   */
  static fromArgs(args: GuildArgs) {
    return new Guild(
      args.guildId,
      args.bump,
      args.guildKit,
      args.matrixId,
      args.name,
      args.members,
      args.visibility,
      args.joiningCriteria
    )
  }

  /**
   * Deserializes the {@link Guild} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Guild, number] {
    return Guild.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Guild} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Guild> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Guild account at ${address}`)
    }
    return Guild.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '38foo9CSfPiPZTBvNhouNaYpvkzKEzWW396PUW2GKPVA'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, guildBeet)
  }

  /**
   * Deserializes the {@link Guild} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Guild, number] {
    return guildBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Guild} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return guildBeet.serialize({
      accountDiscriminator: guildDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Guild} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: GuildArgs) {
    const instance = Guild.fromArgs(args)
    return guildBeet.toFixedFromValue({
      accountDiscriminator: guildDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Guild} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: GuildArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Guild.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Guild} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      guildId: this.guildId.toBase58(),
      bump: this.bump,
      guildKit: this.guildKit.toBase58(),
      matrixId: this.matrixId,
      name: this.name,
      members: this.members,
      visibility: 'GuildVisibility.' + GuildVisibility[this.visibility],
      joiningCriteria:
        'JoiningCriteria.' + JoiningCriteria[this.joiningCriteria],
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const guildBeet = new beet.FixableBeetStruct<
  Guild,
  GuildArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['guildId', beetSolana.publicKey],
    ['bump', beet.u8],
    ['guildKit', beetSolana.publicKey],
    ['matrixId', beet.utf8String],
    ['name', beet.utf8String],
    ['members', beet.array(memberBeet)],
    ['visibility', guildVisibilityBeet],
    ['joiningCriteria', joiningCriteriaBeet],
  ],
  Guild.fromArgs,
  'Guild'
)
